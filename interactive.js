async function init() {
  const node = document.querySelector("#type-text");

  node.innerText = "";

  let inViewport = false;
  const observer = new IntersectionObserver((entries) => {
    const entry = entries[0];
    inViewport = entry.isIntersecting;
  });
  observer.observe(node);

  while (true) {
    if (inViewport) {
      await node.type("HAASE", "Arial");
      await sleep(1000);
      await node.delete("HAASE");
      await sleep(500);
      await node.type("‚∞≥‚∞∞‚∞∞‚∞∏‚∞µ", "glagol");
      await sleep(1000);
      await node.delete("‚∞≥‚∞∞‚∞∞‚∞∏‚∞µ");
      await sleep(500);
    } else {
      await sleep(1000);
    }
  }
}

// Source code üö©

const sleep = (time) => new Promise((resolve) => setTimeout(resolve, time));

class TypeAsync extends HTMLSpanElement {
  get typeInterval() {
    const randomMs = 200 * Math.random() + 100; // Random interval between 100ms and 400ms
    return randomMs;
  }

  async type(text, font1, font2) {
    const words = text.split(" ");
    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      const font = i % 2 === 0 ? font1 : font2;
      this.style.fontFamily = font;

      for (let j = 0; j < word.length; j++) {
        this.innerText += word[j];
        await sleep(this.typeInterval);
      }
      if (i !== words.length - 1) {
        this.innerText += " ";
      }
    }
    await sleep(500); // Delay after typing the entire text
  }

  async delete(text) {
    const length = this.innerText.length;
    const deleteInterval = Math.floor(500 / length); // Distribute the deletion over 500ms
    for (let i = length; i >= 0; i--) {
      this.innerText = text.substring(0, i);
      await sleep(deleteInterval);
    }
  }
}

customElements.define("type-async", TypeAsync, { extends: "span" });

init();

//
const scrollContainer = document.querySelector(".link-m");

function handleResize() {
  if (window.innerWidth < 1000) {
    scrollContainer.addEventListener("wheel", handleWheelScroll);
  } else {
    scrollContainer.removeEventListener("wheel", handleWheelScroll);
  }
}

function handleWheelScroll(evt) {
  evt.preventDefault();
  scrollContainer.scrollLeft += evt.deltaY;
}

window.addEventListener("resize", handleResize);
handleResize();

//
// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
let isDragging = false;
let draggedImage = null;
let offsetX = 0;
let offsetY = 0;
let isDoubleTap = false;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –∏ touch-—Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
document.addEventListener('mousedown', startDragging);
document.addEventListener('mousemove', dragImage);
document.addEventListener('mouseup', stopDragging);
document.addEventListener('touchstart', startDragging);
document.addEventListener('touchmove', dragImage);
document.addEventListener('touchend', stopDragging);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Escape
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–ø–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const clonedImages = document.querySelectorAll('.cloned-img');
    clonedImages.forEach(img => img.remove());
  }
});

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
function startDragging(event) {
  if (event.type === 'mousedown' && event.button !== 0) {
    return; // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –Ω–µ –ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
  }

  if (event.type === 'touchstart') {
    if (!isDoubleTap) {
      isDoubleTap = true;
      setTimeout(() => {
        isDoubleTap = false;
      }, 300); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —Å–±—Ä–æ—Å –¥–≤–æ–π–Ω–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ 300 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
      return; // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∫–∞—Å–∞–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    }
  }

  const target = event.type === 'touchstart' ? event.touches[0].target : event.target;
  draggedImage = target.closest('.cloned-img');

  if (draggedImage) {
    event.preventDefault();
    isDragging = true;
    const rect = draggedImage.getBoundingClientRect();
    const clientX = event.type === 'touchstart' ? event.touches[0].clientX : event.clientX;
    const clientY = event.type === 'touchstart' ? event.touches[0].clientY : event.clientY;
    offsetX = clientX - rect.left;
    offsetY = clientY - rect.top;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
function dragImage(event) {
  if (isDragging && draggedImage) {
    event.preventDefault();
    const clientX = event.type === 'touchmove' ? event.touches[0].clientX : event.clientX;
    const clientY = event.type === 'touchmove' ? event.touches[0].clientY : event.clientY;
    const x = clientX - offsetX;
    const y = clientY - offsetY;
    draggedImage.style.left = `${x}px`;
    draggedImage.style.top = `${y}px`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
function stopDragging() {
  isDragging = false;
  draggedImage = null;
  offsetX = 0;
  offsetY = 0;
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const images = document.querySelectorAll('.item img');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
images.forEach(img => {
  img.addEventListener('click', function(event) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –¥–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç –∫–æ–ø–∏–π
    const existingClones = document.querySelectorAll('.cloned-img');
    const hasDuplicate = Array.from(existingClones).some(clone => clone.src === this.src);
    if (hasDuplicate) {
      return; // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–ø–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const clonedImg = this.cloneNode(true);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏
    clonedImg.classList.add('cloned-img');

    // –†–∞–∑–º–µ—â–∞–µ–º –∫–æ–ø–∏—é –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
    const pageWidth = window.innerWidth;
    const pageHeight = window.innerHeight;
    const imgWidth = clonedImg.width;
    const imgHeight = clonedImg.height;
    const x = (pageWidth - imgWidth) / 20;
    const y = (pageHeight - imgHeight) / 20;
    clonedImg.style.left = `${x}px`;
    clonedImg.style.top = `${y}px`;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    clonedImg.addEventListener('mousedown', startDragging);
    clonedImg.addEventListener('mousemove', dragImage);
    clonedImg.addEventListener('mouseup', stopDragging);
    clonedImg.addEventListener('touchstart', startDragging);
    clonedImg.addEventListener('touchmove', dragImage);
    clonedImg.addEventListener('touchend', stopDragging);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–ø–∏–∏
    clonedImg.addEventListener('click', function() {
      if (isDoubleTap) {
        this.remove();
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–ø–∏–∏
    clonedImg.addEventListener('dblclick', function() {
      if (!isDoubleTap) {
        this.remove();
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    document.body.appendChild(clonedImg);
  });
});



//
